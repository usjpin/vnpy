// Entry Point
S0 -> Config* Declaration* EOF

// Configs
Config -> "config" ConfigType ConfigValue ";"
ConfigType -> "width" | "height" | "mode" | "volume"
ConfigValue -> number | string

// Declarations
Declaration -> LetDeclaration | FunDeclaration | SceneDeclaration | Statement
LetDeclaration -> "let" identifier ( "=" Expression )? ";"
FunDeclaration -> "fun" Function
Function -> identifier "(" Params? ")" BlockStatement
Params -> identifier ( "," identifier )*
SceneDeclaration -> "scene" identifier BlockStatement

// Statements
Statement -> ExpressionStatement | IfStatement | ReturnStatement 
    | WhileStatement | BlockStatement | SpecialStatement
ExpressionStatement -> Expression ";"
IfStatement -> "if" "(" Expression ")" Statement ( "else Statement )?
ReturnStatement -> "return" ExpressionStatement
WhileStatement -> "while" "(" Expression ")" Statement
BlockStatement -> "{" Declaration* "}"

// Special Statements
SpecialStatatement -> ImageStatement | DisplayStatement | OptionsStatement
    | AudioStatement | WaitStatement | JumpStatement | ExitStatement
ImageStatement -> "image ( "show" | "hide" ) Expression ";"
DisplayStatement -> "display" Expression ";"
OptionsStatement -> "options" "{" Case+ "}"
Case -> "case" Expression "do" Statement ";"
AudioStatement -> "audio" ( "start" Expression | "stop" ) ";"
WaitStatement -> "delay" Expression ";"
JumpStatement -> "jump" Expression ";"

// Expressions
Expression -> Assignment
Assignment -> identifier "=" Assignment | Or
Or -> And ( "or" And )*
And -> Eq ( "and" Eq )*
Eq -> Comp ( ( "!=" | "==" ) Comp )*
Comp -> Term ( ( ">" | ">=" | "<" | "<=" ) Term )*
Term -> Fact ( ( "-" | "+" ) Fac )*
Fact -> Unary ( ( "/" | "*" ) Unary )*
Unary -> ( "!" | "-" ) Unary | Call
Call -> Prim ( "(" Args ")" )*
Args -> Expression ( "," Expression )*
Prim -> "true" | "false" | "nil" | number
string | identifier | "(" Expression ")"