//============================
//===Test 1: Dynamic Typing===
//============================
log "-----------------------";
log "---Output for Test 1---";
log "-----------------------";

log "Test 1.1 Ints and Floats";
{
	log "Expected: 1, 2, 1.5, 2.5";
	let A = 1;
	log A;
	log A + 1;
	A = 1.5;
	log A;
	log A + 1;
	log "";
}

log "Test 1.2 Strings";
{
	log "Expected: String, String1";
	let A = "String";
	log A;
	log A + "1";
	log "";
}

log "Test 1.3 Booleans";
{
	log "Expected: true, false";
	let A = true;
	log A;
	log A and false;
	log "";
}

log "Test 1.5 Dynamic Reassignment";
{
	log "Expected: 123, Hello";
	fun testFun(){
		log "Hello";
	}
	let B = 123;
	let A = B;
	log A;
	B = testFun;
	A = B;
	A();
	log "";
}


//===================================
//===Test 2: Arithmetic Operations===
//===================================
log "-----------------------";
log "---Output for Test 2---";
log "-----------------------";

log "Test 2.1 Add, Subtract, Multiply, Divide";
{
	log "Expected: 30, -1, 5.5, 9, 4.5, 0, FirstSecond, FirstSecondThird";
	let A2 = 10;
	let B2 = 0;
	let C2 = "Third";
	log A2 + 20;
	log A2 - 15 + (5 - 1);
	log 5 * 2 - (A2 - 5.5);
	log (A2 / 5) / 0.5 + 5;
	log -5.5 + A2 - B2;
	log 10000 * B2;
	log "First" + "Second";
	log "First" + "Second" + C2;
	log "";
}

log "Test 2.2 AND, OR, and !";
{
	log "Expected: true, true, false, false, true";
	let A2 = true;
	let B2 = false;
	log (A2 and B2) or A2;
	log (true and A2) or B2;
	log (B2 and true) and A2;
	log !A2;
	log !(!A2 or B2);
	log "";
}

log "Test 2.3 Comparisons";
{
	log "Expected: First, true, First, true, false";
	if (10 == 10)
		log "First";
	else 
		log "Second";
	let A2 = 1 < 2;
	log A2;
	if ((15 != "15") and (15.0 == 15.0)) //different typed letiables will compare false
		log "First";
	else
		log "Second";
	A2 = 30 >= 15;
	log A2;
	log ("Yes" == "No") == true;
	log "";
}

log "Test 2.4 Assignment Operator";
{
	log "Expected: Is nil, Yes, 1, 1, 15, 10";
	let A2;
	let B2;
	if (A2 == nil) //letiables are by default initialized to nil
		log "Is nil";
	log A2 = "Yes"; //assignment returns value assigned
	A2 = B2 = 1; 
	log A2;
	log B2;
	A2 = (B2 = 10) + 5;
	log A2;
	log B2;
	log "";
}


//===============================================
//===Test 3: Conditional Statements and Blocks===
//===============================================
log "-----------------------";
log "---Output For Test 3---";
log "-----------------------";

log "Test 3.1 If, For, and While";
{
	log "Expected: This will log., 2, 0, 1, 2, 3, 4, 120, A, AA, AAA";
	if (true){
		log "This will log.";
	}
	else{
		log "This will not log.";
	}
	let A3 = 2;
	if (A3 == 1)
		log "1";
	else if (A3 == 2)
		log "2";
	else
		log "3";
	A3 = 5;
	log A3;
	let C3 = "A";
	while (C3 != "AAAA"){
		log C3;
		C3 = C3 + "A";
	}
	log "";
}

log "Test 3.2 Nested Statements";
{
	log "Expected: 116";
	let A3 = 20;
	let result = 0;
	log result;
	log "";
}

log "Test 3.3 Blocks";
{
	log "Expected: Block 1, Block 2, Block 3, Block 3, Block 4, Block 3";
	let A = "Block ";
	{
		let B = "1";
		log A + B; //letiables from outer scope can be accessed in inner
	}
	{
		let B = "2"; //letiable of same name can be reinitialized since previous B is now out of scope
		log A + B;
	}
	let B1;
	let B2;
	{
		fun test(){
			log "Block 3";
		}
		B1 = test; //letiables from outer scope can be changed in inner
		B2 = test;
	}
	B1();
	B2();
	{
		fun test(){
			log "Block 4";
		}
		B1 = test;
	}
	B1();
	B2();
	log "";
}


//=======================
//===Test 4: Functions===
//=======================
log "-----------------------";
log "---Output For Test 4---";
log "-----------------------";

log "Test 4.1 Standard Functions";
{
	log "Expected: 20, 1, 2, 50, -19";
	let A = 0;
	fun test(a){
		log a + 20;
		A = A + 1; //similar with blocks, function scope can access letiables in outer
		log A;
	}
	test(A);
	
	fun test2(a){
		return a + A; //functions can return values
	}
	log test2(A);

	//functions can take 0 or more arguments
	fun test3(){
		return 50;
	}
	fun test4(a, b){
		return a - b;
	}
	log test3();
	log test4(A, 20);
	log "";
}

log "Test 4.2 Function Assignment";
{
	log "Expected: 100, 101, -1";
	fun test1(){
		return 100;
	}
	fun test2(a){
		return a + 100;
	}
	fun test3(a, b){
		return a - b;
	}
	let A = test1; //Functions can be assigned without being called
	log A();
	let B = test2;
	log B(1);
	let C = test3;
	log C(1, 2);
	log "";
}

log "Test 4.3 Nested Functions";
{
	log "Expected: 3, -1, 1";
	fun outerTest(select, a, b){
		fun add(first, second){ //Functions can be nested
			return first + second;
		}
		fun subtract(first, second, invert){
			fun negate(num){
				return -num;
			}
			second = negate(second);
			let result = add(first, second);
			if (invert == true)
				return negate(result);
			return result;
		}
		if (select == "ADD")
			log add(a, b);
		else if (select == "SUBTRACT")
			log subtract(a, b, false);
		else if (select == "SUBNEGATE")
			log subtract(a, b, true);
	}
	outerTest("ADD", 1, 2);
	outerTest("SUBTRACT", 1, 2);
	outerTest("SUBNEGATE", 1, 2);
	log "";
}

log "Test 4.4 Function Closures";
{
	log "Expected: 10";
	fun outerTest(){
		let a = 10;
		fun innerTest(){
			log a;
			return a;
		}
		return innerTest; //Nested functions can be used for closures
	}
	let b = outerTest();
	log b();
	log "";
}

log "Test 4.5 Argument Evaluation";
{
	log "Expected: false, 16, 81, 24, 99";
	fun test(a){
		return a;
	}
	log test(20 - 45 == "Hello"); //Arguments are evaluated when passed 

	//Function calls can be nested
	fun first(a){
		return a * a;
	}
	fun second(a){
		return a - 1;
	}
	log first(second(5)); //including function calls
	log first(second(10));
	log second(first(5));
	log second(first(10));

	log "";
}

log "Test 4.6 Recursive Functions";
{
	log "Expected: 120, 5040";
	fun factorial(a){
		if (a > 1)
			return a * factorial(a-1); //Functions can be called recursively
		return a;
	}
	log factorial(5);
	log factorial(7);
	log "";
}

log "Test 4.7 Sequential Function Calls";
{
	log "Expected: third";
	fun first(a){
		return a;
	}
	fun second(a){
		log a;
	}

	first(second)("third"); //Functions can be called sequentially in-line
	//this is due to previously demonstrated fact functions can be assigned without
	//necessarily being called
}